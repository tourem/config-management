import com.typesafe.sbt.packager.Keys._
import com.typesafe.sbt.packager.universal.UniversalPlugin.autoImport._
import play.sbt.PlayCommands.playPrompt
import play.sbt.PlayImport.ws
import play.sbt.routes.RoutesKeys
import play.twirl.sbt.Import.TwirlKeys
import sbt.Keys._
import sbt._
import sbtassembly.AssemblyPlugin.autoImport._
import sbtassembly.{MergeStrategy, PathList}
import sbtbuildinfo.BuildInfoPlugin.autoImport._

object Settings {
  val timestamp = new java.text.SimpleDateFormat("yyyyMMdd-HHmm").format(new java.util.Date())

  val common = Seq(
    // name dist with timestamp
    packageName in Universal := s"${name.value}-${version.value}-$timestamp",
    // skip scaladoc when running dist
    publishArtifact in (Compile, packageDoc) := false,
    publishArtifact in packageDoc := false,
    sources in (Compile, doc) := Seq.empty,
    // playPrompt added explicitly for non-Play project, such as the migration projects
    shellPrompt := playPrompt
  )

  val commonPlay = common ++ Seq(
    buildInfoPackage := "sbt",
    buildInfoOptions += BuildInfoOption.BuildTime,
    buildInfoKeys := Seq[BuildInfoKey](
      name,
      version,
      scalaVersion,
      sbtVersion
    ),
    RoutesKeys.routesImport := Seq(),
    TwirlKeys.templateImports := Seq(),
    // dont include local.conf in dist
    mappings in Universal := {
      val origMappings = (mappings in Universal).value
      origMappings.filterNot { case (_, file) => file.endsWith("local.conf") }
    },
    dependencyOverrides ++= Seq(
      Dependencies.akka.actor,
      Dependencies.akka.slf4j,
      Dependencies.akka.stream,
      Dependencies.guava.core
    ),
    libraryDependencies ++= Seq(
      // Compiler plugins
      Dependencies.silencer.plugin,
      Dependencies.silencer.lib
    )
  )

  val commonPlayFront = commonPlay ++ Seq(
    libraryDependencies ++= Seq(
      ws,
      // i18n
      Dependencies.jsMessages.core,
      // Test dependencies
      Dependencies.scalatest.play % Test
    )
  )

  val isCiBuild: Boolean = sys.env.get("CI_BUILD").exists(_.toLowerCase == "true")

  val defaultAssemblyMergeStrategy = Seq(
    assembly / assemblyMergeStrategy := {
      // We solve conflict with play conf file by evicting api conf file
      case PathList("application.conf", _ @_*) =>
        MergeStrategy.last // TODO check hotfix/db-exporter assemblies to make sure this strategy is correct every times 
      // Many dependencies (sfl4j-compliant) use this lib which causes classpath conflicts
      case PathList("org", "apache", "commons", "logging", _ @_*) =>
        MergeStrategy.first
      // Solving problem with akka-http conf file by taking the first one
      case PathList("play", "reference-overrides.conf", _ @_*) =>
        MergeStrategy.first
      // We can't merge the Java 9+ module declarations in a fat JAR. However, we target Java 8 (and Scala doesn't yet
      // properly support the Java module system anyway) so we might as well just ignore them.
      case x if x endsWith "module-info.class" =>
        MergeStrategy.discard
      case x =>
        val oldStrategy = (assembly / assemblyMergeStrategy).value
        oldStrategy(x)
    }
  )

  object scalacOptions {

    // See https://tpolecat.github.io/2017/04/25/scalac-flags.html
    private val defaultScalacOptions: Seq[String] = Seq(
      "-encoding",
      "utf-8", // Specify character encoding used by source files.
      "-explaintypes", // Explain type errors in more detail.
      "-feature",      // Emit warning and location for usages of features that should be imported explicitly.
      //  "-language:existentials",            // Existential types (besides wildcard types) can be written and inferred
      //  "-language:experimental.macros",     // Allow macro definition (besides implementation and application)
      //  "-language:higherKinds",             // Allow higher-kinded types
      //  "-language:implicitConversions",     // Allow definition of implicit functions called views
      "-deprecation",
      "-unchecked",  // Enable additional warnings where generated code depends on assumptions.
      "-Xcheckinit", // Wrap field accessors to throw an exception on uninitialized access.
      //  "-Xfatal-warnings", // Fail the compilation if there are any warnings.
      //  "-Xfuture",                          // Turn on future language features.
      "-Xlint:adapted-args", // Warn if an argument list is modified to match the receiver.
      "-Xlint:by-name-right-associative", // By-name parameter of right associative operator.
      "-Xlint:constant", // Evaluation of a constant arithmetic expression results in an error.
      "-Xlint:delayedinit-select", // Selecting member of DelayedInit.
      "-Xlint:doc-detached", // A Scaladoc comment appears to be detached from its element.
      "-Xlint:inaccessible", // Warn about inaccessible types in method signatures.
      "-Xlint:infer-any", // Warn when a type argument is inferred to be `Any`.
      "-Xlint:missing-interpolator", // A string literal appears to be missing an interpolator id.
      "-Xlint:nullary-override", // Warn when non-nullary `def f()' overrides nullary `def f'.
      "-Xlint:nullary-unit", // Warn when nullary methods return Unit.
      "-Xlint:option-implicit", // Option.apply used implicit view.
      "-Xlint:package-object-classes", // Class or object defined in package object.
      "-Xlint:poly-implicit-overload", // Parameterized overloaded implicit methods are not visible as view bounds.
      "-Xlint:private-shadow", // A private field (or class parameter) shadows a superclass field.
      "-Xlint:stars-align", // Pattern sequence wildcard must align with sequence component.
      "-Xlint:type-parameter-shadow", // A local type parameter shadows a type already in scope.
      "-Xlint:unsound-match", // Pattern match may not be typesafe.
      "-Yno-adapted-args", // Do not adapt an argument list (either by inserting () or creating a tuple) to match the receiver.
      "-Ypartial-unification", // Enable partial unification in type constructor inference
      "-Ywarn-dead-code", // Warn when dead code is identified.
      "-Ywarn-extra-implicit", // Warn when more than one implicit parameter section is defined.
      "-Ywarn-inaccessible", // Warn about inaccessible types in method signatures.
      "-Ywarn-infer-any", // Warn when a type argument is inferred to be `Any`.
      "-Ywarn-nullary-override", // Warn when non-nullary `def f()' overrides nullary `def f'.
      "-Ywarn-nullary-unit",  // Warn when nullary methods return Unit.
      "-Ywarn-numeric-widen", // Warn when numerics are widened.
      //  "-Ywarn-unused:implicits", // Warn if an implicit parameter is unused.
      "-Ywarn-unused:imports", // Warn if an import selector is not referenced.
      "-Ywarn-unused:locals", // Warn if a local definition is unused.
      "-Ywarn-unused:params", // Warn if a value parameter is unused.
      "-Ywarn-unused:patvars", // Warn if a variable bound in a pattern is unused.
      "-Ywarn-unused:privates", // Warn if a private member is unused.
      "-Ywarn-value-discard", // Warn when non-Unit expression results are unused.
      "-Ywarn-macros:after"
    )

    val lenient: Seq[String] = defaultScalacOptions :+ "-Ywarn-unused:imports"

    val strict: Seq[String] = defaultScalacOptions ++ Seq("-Xfatal-warnings", "-Ywarn-unused:imports")

    val console: Seq[String] = defaultScalacOptions
  }
}
